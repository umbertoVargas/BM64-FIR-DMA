/************************************************************************/
/*																		*/
/*	demo.c	--	Zybo DMA Demo				 						*/
/*																		*/
/************************************************************************/
/*	Author: Sam Lowe											*/
/*	Copyright 2015, Digilent Inc.										*/
/************************************************************************/
/*  Module Description: 												*/
/*																		*/
/*		This file contains code for running a demonstration of the		*/
/*		DMA audio inputs and outputs on the Zybo.					*/
/*																		*/
/*																		*/
/************************************************************************/
/*  Notes:																*/
/*																		*/
/*		- The DMA max burst size needs to be set to 16 or less			*/
/*																		*/
/************************************************************************/
/*  Revision History:													*/
/* 																		*/
/*		9/6/2016(SamL): Created										*/
/*																		*/
/************************************************************************/






/***************************** Include Files *********************************/
#include "demo.h"
/************************** Function Prototypes ******************************/
#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif


/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */

static XIic sIic;
static XUartLite sUartLite;
static XGpio sUserIOButtons;
static XGpio sUserIOSw;
static XLlFifo fifo;
static   XAxiDma sAxiDma;		/* Instance of the XAxiDma */

XTmrCtr TimerCounter;
XTmrCtr *TimerCounterPtr = &TimerCounter;
u32 Time;
 static XIntc sIntc;

//
// Interrupt vector table

const ivt_t ivt[] = {
	//IIC
	{XPAR_MICROBLAZE_0_AXI_INTC_AXI_IIC_0_IIC2INTC_IRPT_INTR, (XInterruptHandler)XIic_InterruptHandler, &sIic},
	//DMA Stream to MemoryMap Interrupt handler
	{XPAR_MICROBLAZE_0_AXI_INTC_AXI_DMA_0_S2MM_INTROUT_INTR, (XInterruptHandler)fnS2MMInterruptHandler, &sAxiDma},
	//DMA MemoryMap to Stream Interrupt handler
	{XPAR_MICROBLAZE_0_AXI_INTC_AXI_DMA_0_MM2S_INTROUT_INTR, (XInterruptHandler)fnMM2SInterruptHandler, &sAxiDma},
	//User I/O (buttons, switches, LEDs)
	{XPAR_INTC_0_GPIO_0_VEC_ID, (XInterruptHandler)fnUserIOIsr, &sUserIOButtons},
	{XPAR_INTC_0_GPIO_1_VEC_ID, (XInterruptHandler)fnUserIOSwIsr, &sUserIOSw},
	//FIFO
		{XPAR_MICROBLAZE_0_AXI_INTC_AXI_FIFO_MM_S_0_INTERRUPT_INTR, (XInterruptHandler)FifoHandler, &fifo},
	//UART BM64
		{XPAR_INTC_0_UARTLITE_1_VEC_ID,  (XInterruptHandler)XUartLite_InterruptHandler, &sUartLite}
};

/*****************************************************************************/
/**
*
* Main function
*
* This function is the main entry of the interrupt test. It does the following:
*	Initialize the interrupt controller
*	Initialize the IIC controller
*	Initialize the User I/O driver
*	Initialize the DMA engine
*	Initialize the Audio I2S controller
*	Initialize THE FIFO interface with BM64
*	Initalize The Uartlite interface with BM64
*	Initalize The Timer but it wont be used, future improvements..
*	Enable the interrupts
*	Wait for a button event then start selected task
*	Wait for task to complete
*
* @param	None
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
* @note		None.
*
******************************************************************************/
int main(void)
{
	int Status;
	int ElapsedTimeSeconds;


	//NO Cache
	init_platform();
//leds
	runLed();


	xil_printf("\r\n--- Entering main() --- \r\n");
	Status = initUartLite(&sUartLite,UARTLITE_DEVICE_ID);
		if(Status != XST_SUCCESS)
			{
				xil_printf("Error initializing uart 2");
				return XST_FAILURE;
			}

	//
	//Initialize the interrupt controller
	Status = fnInitInterruptController(&sIntc);
	if(Status != XST_SUCCESS)
		{
			xil_printf("Error initializing interrupts");
			return XST_FAILURE;
		}


	// Initialize IIC controller
	Status = fnInitIic(&sIic);
	if(Status != XST_SUCCESS)
		{
			xil_printf("Error initializing I2C controller");
			return XST_FAILURE;
		}

    // Initialize User I/O Buttons driver
    Status = fnInitUserIOButtons(&sUserIOButtons);
    if(Status != XST_SUCCESS)
		{
			xil_printf("User I/O  Buttons ERROR");
			return XST_FAILURE;
		}
    // Initialize User I/O SW driver
     Status = fnInitUserIOSw(&sUserIOSw);
     if(Status != XST_SUCCESS)
 		{
 			xil_printf("User I/O Switches ERROR");
 			return XST_FAILURE;
 		}


	//Initialize DMA
	Status = fnConfigDma(&sAxiDma);
	if(Status != XST_SUCCESS)
		{
			xil_printf("DMA configuration ERROR");
			return XST_FAILURE;
		}
 	//Initialize FIFO RX
    Status = fnInitFifo(&fifo,FIFO_DEV_ID);
    if(Status != XST_SUCCESS)
    	{
      	  xil_printf("Error initializing fifo");
     	  return XST_FAILURE;
   	   	}

	//Initialize Audio I2S
	Status = fnInitAudio();
	if(Status != XST_SUCCESS)
		{
			xil_printf("Audio initializing ERROR");
			return XST_FAILURE;
		}
	//INITIALIZE TIMER
	  Status = XTmrCtr_Initialize(TimerCounterPtr, XPAR_TMRCTR_0_DEVICE_ID);
	    if (Status != XST_SUCCESS)
			{
				return XST_FAILURE;
			}



	// Enable all interrupts in our interrupt vector table
	// Make sure all driver instances using interrupts are initialized first
	fnEnableInterrupts(&sIntc, &ivt[0], sizeof(ivt)/sizeof(ivt[0]));

	Status = uartLiteIntrSetup(&sUartLite,UARTLITE_DEVICE_ID);
		 if (Status != XST_SUCCESS)
					{
			 	 	 xil_printf("Uartlite initializing ERROR");
						return XST_FAILURE;
					}



	xil_printf("----------------------------------------------------------\r\n");
	xil_printf("Zybo DMA Audio Demo\r\n");
	xil_printf("----------------------------------------------------------\r\n");


    //main loop

    while(1)
    {

		// Checking the DMA S2MM event flag
		if (Demo.fDmaS2MMEvent)
			{
				xil_printf("\r\nRecording Done...");

				// Disable Stream function to send data (S2MM)
				Xil_Out32(I2S_STREAM_CONTROL_REG, 0x00000000);
				Xil_Out32(I2S_TRANSFER_CONTROL_REG, 0x00000000);

				Xil_DCacheInvalidateRange((u32) MEM_BASE_ADDR, 5*NR_AUDIO_SAMPLES);
				 microblaze_invalidate_dcache();
				// Reset S2MM event and record flag
				Demo.fDmaS2MMEvent = 0;
				Demo.fAudioRecord = 0;
			}

		// Checking the DMA MM2S event flag
		if (Demo.fDmaMM2SEvent)
			{
				xil_printf("\r\nPlayback Done...");

				// Disable Stream function to send data (S2MM)
				Xil_Out32(I2S_STREAM_CONTROL_REG, 0x00000000);
				Xil_Out32(I2S_TRANSFER_CONTROL_REG, 0x00000000);
				//Flush cache
				//microblaze_flush_dcache();
	//			Xil_DCacheFlushRange((u32) MEM_BASE_ADDR, 5*NR_AUDIO_SAMPLES);
				//Reset MM2S event and playback flag
				Demo.fDmaMM2SEvent = 0;
				Demo.fAudioPlayback = 0;
			}

		// Checking the DMA Error event flag
		if (Demo.fDmaError)
			{
				xil_printf("\r\nDma Error...");
				xil_printf("\r\nDma Reset...");


				Demo.fDmaError = 0;
				Demo.fAudioPlayback = 0;
				Demo.fAudioRecord = 0;
			}

		// Checking the btn change event
		if(Demo.fUserIOEvent)
		{

			switch(Demo.chBtn)
			{
				case 'r':
					if (!Demo.fAudioRecord && !Demo.fAudioPlayback)
					{
						xil_printf("\r\nStart Recording...\r\n");
						fnAudioRecord(sAxiDma,fifo,NR_AUDIO_SAMPLES);
						Demo.fAudioRecord = 1;
					}
					else
					{
						if (Demo.fAudioRecord)
						{
							xil_printf("\r\nStill Recording...\r\n");
						}
						else
						{
							xil_printf("\r\nStill Playing back...\r\n");
						}
					}
					break;
				case 'p':
					if (!Demo.fAudioRecord && !Demo.fAudioPlayback)
					{
						xil_printf("\r\nStart Playback...\r\n");
						fnSetHpOutput();
						fnAudioPlay(sAxiDma,NR_AUDIO_SAMPLES);
						Demo.fAudioPlayback = 1;
					}
					else
					{
						if (Demo.fAudioRecord)
						{
							xil_printf("\r\nStill Recording...\r\n");
						}
						else
						{
							xil_printf("\r\nStill Playing back...\r\n");
						}
					}
					break;



				case 'c':
					if (!Demo.fAudioRecord && !Demo.fAudioPlayback)
							{
								changeModuleName(&sUartLite);

								exampleReadWriteEeprom(&sUartLite);
								xil_printf("\r\n W-R  Eeprom done: \n\r");


							}
					else
							{
								if (Demo.fAudioRecord)
									{
								     	xil_printf("\r\nStill Recording...\r\n");
									}
								else
									{
										xil_printf("\r\nStill Playing back...\r\n");
									}
							}
						break;

				default:
					break;
			}

			// Reset the user I/O flag
			Demo.chBtn = 0;
			Demo.fUserIOEvent = 0;


		}

    }

	xil_printf("\r\n--- Exiting main() --- \r\n");


	return XST_SUCCESS;

}





